name: Release Python Client

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
        description: "the ref (branch, commit sha, or tag) to run tests against"
      release_version:
        required: true
        type: string
        description: "the release version for sanity check after building artifacts"
      GO_VERSION:
        required: false
        type: string
        default: "1.20"
        description: "Go version for building IATK binary"
      CIBW_PYTHON_VERSION:
        required: false
        type: string
        default: "3.8"
        description: "Python version for installing and running cibuildwheel"
      artifact_name:
        required: false
        type: string
        default: "python-client-artifacts"
        description: "name for the built artifacts"
      provenance_name:
        required: false
        type: string
        default: "python-client.multiple.intoto.jsonl"
        description: "name of provenance file"
      skip_pypi:
        required: false
        type: boolean
        default: false
        description: "boolean to skip publishing to PyPi"
    outputs:
      attestation_hashes:
        description: "Attestation encoded hash for provenance"
        value: ${{ jobs.collate.outputs.attestation_hashes }}
      artifact_name:
        description: "name for the built artifacts"
        value: ${{ inputs.artifact_name }}
      provenance_name:
        description: "name of provenance file"
        value: ${{ inputs.provenance_name }}
    
jobs:
  build-wheels:
    name: "build-wheels-${{ matrix.os }}-${{ matrix.arch }}"
    permissions:
      contents: read
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: amd64 
            CIBW_ARCHS: x86_64
          - os: macos-latest
            arch: arm64 
            CIBW_ARCHS: arm64
          - os: windows-latest
            arch: amd64 
            CIBW_ARCHS: AMD64
          - os: windows-latest
            arch: arm64 
            CIBW_ARCHS: ARM64
          - os: ubuntu-latest
            arch: amd64 
            CIBW_ARCHS: x86_64
          - os: ubuntu-latest
            arch: arm64 
            CIBW_ARCHS: aarch64
    steps:
      # checkout
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ inputs.ref }}

      # for building binary
      - name: Set up Go
        uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version: ${{ inputs.GO_VERSION }}

      # Used to host cibuildwheel
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: ${{ inputs.CIBW_PYTHON_VERSION }}

      - name: Install cibuildwheel
        run: |
          python -m pip install --upgrade build
          python -m pip install cibuildwheel

      - name: Set up QEMU
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64' }}
        uses: docker/setup-qemu-action@326560df218a7ea9cf6ab49bbc88b8b306bb437e
        with:
          platforms: arm64

      - name: copy go source codebase
        working-directory: ./python-client
        run: make copy-service-source-for-sdist

      - name: Build wheels
        working-directory: "python-client"
        env:
          CIBW_BUILD_FRONTEND: build
          CIBW_SKIP: "*-musllinux*"
          CIBW_ARCHS: ${{ matrix.CIBW_ARCHS }}
          # TODO (hawflau): find a way to build external of cibuildwheel
          CIBW_ENVIRONMENT_LINUX: GOARCH="${{ matrix.arch }}" IATK_SKIP_BUILD_BINARY="1"
          CIBW_BEFORE_ALL_LINUX: |
            curl -O -L "https://golang.org/dl/go1.21.1.linux-amd64.tar.gz" && 
            tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz && 
            export PATH=$PATH:/usr/local/go/bin && 
            env GOOS=linux GOARCH=${{ matrix.arch }} go build -C ./src/iatk_src -o ../iatk_service/ ./cmd/iatk
        run: python -m cibuildwheel --output-dir dist

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ./python-client/dist/*.whl
          
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11  # v4.1.1
        with:
          ref: ${{ inputs.ref }}

      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # v4.7.1
        with:
          python-version: "3.8"

      - name: Setup Python Client without dev dependencies
        working-directory: "python-client"
        run: |
          make copy-service-source-for-sdist
      
      - name: Build sdist
        working-directory: "python-client"
        run: |
          pip install --upgrade build
          python -m build --sdist

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: ./python-client/dist/*.tar.gz
      
  # collect artifacts and Create attestation encoded hash for provenance
  collate:
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist]
    outputs:
      attestation_hashes: ${{ steps.encoded_hash.outputs.attestation_hashes }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ inputs.artifact_name }}
          path: ./dist/

      # NOTE: this is a sanity check to ensure the artifacts contain only wheels and sdist
      # with correct name and version
      - name: file count check
        run: |
          all=$(find . \( -type f \) | wc -l)
          echo $all
          sdist=$(find . \( -name aws-iatk-${{ inputs.release_version }}.tar.gz \) | wc -l)
          echo $sdist
          wheels=$(find . \( -name aws_iatk-${{ inputs.release_version }}-*.whl \) | wc -l)
          echo $wheels
          [ $sdist -eq 1 ]
          [ $all -eq $(($sdist + $wheels)) ]

      # NOTE: SLSA retraces our build to its artifact to ensure it wasn't tampered
      # coupled with GitHub OIDC, SLSA can then confidently sign it came from this release pipeline+commit+branch+org+repo+actor+integrity hash
      - name: Create attestation encoded hash for provenance
        id: encoded_hash
        working-directory: dist
        run: echo "attestation_hashes=$(sha256sum ./* | base64 -w0)" >> "$GITHUB_OUTPUT"

  # TODO: uncomment provenance job once repo is public
  # create provenance file
  # This job creates a provenance file that describes how our release was built (all steps)
  # after it verifies our build is reproducible within the same pipeline
  # it confirms that its own software and the CI build haven't been tampered with (Trust but verify)
  # lastly, it creates and sign an attestation (multiple.intoto.jsonl) that confirms
  # this build artifact came from this GitHub org, branch, actor, commit ID, inputs that triggered this pipeline, and matches its integrity hash
  # NOTE: supply chain threats review (we protect against all of them now): https://slsa.dev/spec/v1.0/threats-overview
  provenance:
    needs: [collate]
    permissions:
      contents: write # nested job explicitly require despite upload assets being set to false
      actions: read # To read the workflow path.
      id-token: write # To sign the provenance.
    # TODO: remove
    runs-on: ubuntu-latest
    steps:
      - run: touch ${{ inputs.provenance_name }} && echo "hello, world!" >> ${{ inputs.provenance_name }}
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.provenance_name }}
          path: ${{ inputs.provenance_name }}
    #####
  #   # NOTE: provenance fails if we use action pinning... it's a Github limitation
  #   # because SLSA needs to trace & attest it came from a given branch; pinning doesn't expose that information
  #   # https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/generic/README.md#referencing-the-slsa-generator
  #   uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
  #   with:
  #     base64-subjects: ${{ needs.collate.outputs.attestation_hashes }}
  #     upload-assets: false  # we upload its attestation in create_tag job, otherwise it creates a new release
  #     provenance-name: ${{ inputs.provenance_name }}

  publish:
    needs: [build-wheels, build-sdist, collate, provenance]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC for PyPi Trusted Publisher feature
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: ${{ inputs.artifact_name }}
          path: ./dist/

      - name: Upload to PyPi prod
        if: ${{ !inputs.skip_pypi }}
        uses: pypa/gh-action-pypi-publish@b7f401de30cb6434a1e19f805ff006643653240e # v1.8.10
