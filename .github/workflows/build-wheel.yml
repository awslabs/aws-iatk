name: build-wheel

on:
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.20"

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: copy go source codebase
        working-directory: ./python-client
        run: make copy-service-source-for-sdist

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        working-directory: ./python-client
        run: python -m cibuildwheel --output-dir wheels
        env: 
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64 ARM64"
      
      - uses: actions/upload-artifact@v3
        with:
          name: wheels-test-artifact
          path: ./python-client/wheels/*.whl
          retention-days: 15

  build_wheels_linux:
    name: Build wheels on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        GO_ARCHITECTURE: [amd64, arm64]
        LINUX_ARCHITECTURE: [x86_64, aarch64]
        exclude:
          - GO_ARCHITECTURE: amd64
            LINUX_ARCHITECTURE: aarch64
          - GO_ARCHITECTURE: arm64
            LINUX_ARCHITECTURE: x86_64

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@326560df218a7ea9cf6ab49bbc88b8b306bb437e
        with:
          platforms: all

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3

      - name: copy go source codebase
        working-directory: ./python-client
        run: make copy-service-source-for-sdist

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        working-directory: ./python-client
        run: python -m cibuildwheel --output-dir wheels
        env: 
          CIBW_SKIP: "*-musllinux*" 
          CIBW_ENVIRONMENT_LINUX: GOARCH="${{ matrix.GO_ARCHITECTURE }}"
          CIBW_ARCHS_LINUX: "${{matrix.LINUX_ARCHITECTURE}}"
          CIBW_BEFORE_ALL_LINUX: 
            curl -O -L "https://golang.org/dl/go1.21.1.linux-amd64.tar.gz" && 
            tar -C /usr/local -xzf go1.21.1.linux-amd64.tar.gz && 
            export PATH=$PATH:/usr/local/go/bin && 
            env GOOS=linux GOARCH=${{ matrix.GO_ARCHITECTURE }} go build -C ./src/zion_src -o ../zion_service/ ./cmd/zion
      
      - uses: actions/upload-artifact@v3
        with:
          name: wheels-test-artifact
          path: ./python-client/wheels/*.whl
          retention-days: 15

  check_version_bump:
    name: check version on macos-latest
    runs-on: macos-latest
    needs: [build_wheels, build_wheels_linux]
    steps:
      - name: checkout develop branch
        uses: actions/checkout@v4
        with:
            ref: develop
            
      - id: version-develop
        name: Get Zion Version Develop
        run: echo "VERSION_DEVELOP=$(awk '/_version =/ {print $3}' python-client/src/zion/version.py)" >> "$GITHUB_ENV"

      - name: checkout source branch
        uses: actions/checkout@v4

      - id: version-source
        name: Get Zion Version Source
        run: echo "VERSION_SOURCE=$(awk '/_version =/ {print $3}' python-client/src/zion/version.py)" >> "$GITHUB_ENV"
          

      - name: Check Version Bump
        run: 
            if [ $VERSION_SOURCE = $VERSION_DEVELOP ]; then 
                  echo "No version change, exiting!";
                  exit 1;
                else
                  echo Versions are different;
                  exit 0;
                fi
    
  release:
    name: release on macos-latest
    runs-on: macos-latest
    needs: check_version_bump
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: "us-east-1"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v3

      - name: Make Wheels Directory
        run: mkdir wheels

      - uses: actions/download-artifact@v3
        with:
          name: wheels-test-artifact
          path: wheels

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
                pip install twine awscli

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            role-to-assume: ${{secrets.ZION_TEST_RELEASE_IAM_ARN}}
            role-session-name: CiReleaseTest
            aws-region: ${{env.AWS_REGION}}

      - name: Upload to CodeArtifact
        run: 
            |      
            export TWINE_REPOSITORY_URL=`aws codeartifact get-repository-endpoint --domain aws --domain-owner 461630630816 --repository zion-wheels-jysheng --region us-east-1 --format pypi --query repositoryEndpoint --output text`
            export TWINE_PASSWORD=`aws codeartifact get-authorization-token --domain aws --domain-owner 461630630816 --region us-east-1 --query authorizationToken --output text`
            export TWINE_USERNAME=aws
            python -m twine upload --verbose wheels/*.whl      